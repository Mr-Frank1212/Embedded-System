///////////////////////////////////////////////////////////////////////////////
/// REVCOUNT.H
///
/// Rev counter module
///
/// Dr J A Gow 2022
///
//////////////////////////////////////////////////////////////////////////////

#ifndef REVCOUNT_H_
#define REVCOUNT_H_


///////////////////////////////////////////////////////////////////////////////
/// REVInitialize
///
/// This is called once at system startup. The timer is configured and pin
/// change interrupts are set up
///
///
///////////////////////////////////////////////////////////////////////////////

void REVInitialize(void);

///////////////////////////////////////////////////////////////////////////////
/// REVDisableOvfInterrupt
///
/// Disables the overflow interrupt. We use this to ensure that access to
/// input variables for the PI are atomic with respect to the PI controller
/// (which runs in interrupt context)
///
/// @context: TASK
/// @scope: EXPORTED
/// @param: NONE
/// @return: NONE
///
///////////////////////////////////////////////////////////////////////////////

void REVDisableOvfInterrupt(void);

///////////////////////////////////////////////////////////////////////////////
/// REVEnableOvfInterrupt
///
/// Enables the overflow interrupt. We use this to ensure that access to
/// input variables for the PI are atomic with respect to the PI controller
/// (which runs in interrupt context)
///
/// @context: TASK
/// @scope: EXPORTED
/// @param: NONE
/// @return: NONE
///
///////////////////////////////////////////////////////////////////////////////

void REVEnableOvfInterrupt(void);

///////////////////////////////////////////////////////////////////////////////
/// REVGetRevsPerSec
///
/// Get a calculated value of revs per second. This is not synchronized to the
/// interrupt, and is slow. It can be used for interface and display, but
/// will not be a quick solution for real-time rps control in a feedback loop.
///
/// @context: TASK
/// @scope: EXPORTED
/// @param: NONE
/// @return: unsigned long rpscount
///
///////////////////////////////////////////////////////////////////////////////

double REVGetRevsPerSec(void);

///////////////////////////////////////////////////////////////////////////////
/// REVInterruptHandler
///
/// This ISR is triggered when the beam is brkoen
///
/// @context: INTERRUPT
/// @scope: INTERNAL
///
///////////////////////////////////////////////////////////////////////////////

void REVInterruptHandler(void);


#endif
